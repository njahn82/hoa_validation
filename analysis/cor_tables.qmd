---
title: "Correlation tests"
format: 
    gfm:
      echo: true
      message: false
      warning: false
      code-fold: true
prefer-html: true
---

## About  

The aim of this document is to determine the correlation between coefficients for several hybrid open access indicators between hoaddata, Web of Science and Scopus.

## Data preparation

```{r lood_data}
library(tidyverse)
library(corrr)
library(stats)
library(Hmisc)
library(here)


# Load data
jn_df <- readr::read_csv(here("data", "/jn_country_stats_all.csv")) |>
  filter(issn_l != "0027-8424") |>
  mutate(earliest_year = as.character(earliest_year))


# Calculate indicators by country and year
my_df_ind <- jn_df |> 
  select(-earliest_year) |> 
  group_by(country_code) |> 
  summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) 
```

Automate reporting

```{r automate_tables}
#' Create a correlation matrix with significance markers
#'
#' @param data A data frame containing the variables for correlation analysis
#' @param vars A character vector of variable names to include in the correlation matrix
#' @param group_name A string to be included in the title of the correlation matrix
#' @return A list with the correlation data frame and title
#' @importFrom dplyr select all_of
#' @importFrom Hmisc rcorr
#' @importFrom stringr str_to_title
create_correlation_table <- function(data, vars, group_name) {
  # Check if all variables exist in the data
  missing_vars <- setdiff(vars, names(data))
  if (length(missing_vars) > 0) {
    warning(paste("The following variables are not in the dataset:", 
                  paste(missing_vars, collapse = ", ")))
    vars <- intersect(vars, names(data))
  }
  
  # Select only the specified variables
  subset_data <- data %>% select(all_of(vars))
  
  # Calculate Spearman correlation
  corr_result <- rcorr(as.matrix(subset_data), type = "spearman")
  r <- corr_result$r
  p <- corr_result$P
  
  # Create a dataframe for the table
  corr_df <- as.data.frame(r)
  
  # Add significance markers
  for (i in 1:nrow(r)) {
    for (j in 1:ncol(r)) {
      if (!is.na(p[i, j])) {
        if (p[i, j] < 0.001) {
          corr_df[i, j] <- paste0(round(r[i, j], 2), "***")
        } else if (p[i, j] < 0.01) {
          corr_df[i, j] <- paste0(round(r[i, j], 2), "**")
        } else if (p[i, j] < 0.05) {
          corr_df[i, j] <- paste0(round(r[i, j], 2), "*")
        } else {
          corr_df[i, j] <- round(r[i, j], 2)
        }
      }
    }
  }
  
  # Set diagonal to "-"
  for (i in 1:nrow(corr_df)) {
    corr_df[i, i] <- "-"
  }
  
  # Create a nicer version of variable names for display
  nice_names <- gsub("_", " ", vars)
  nice_names <- stringr::str_to_title(nice_names)
  
  # Set row and column names
  rownames(corr_df) <- nice_names
  colnames(corr_df) <- nice_names
  
  return(list(df = corr_df, title = paste("Spearman Correlation Matrix -", group_name)))
}

#' Display correlation matrix using Pandoc table with row names
#'
#' @param corr_list A list containing the correlation data frame and title
#' @return A character string containing the Pandoc table
create_pandoc_table <- function(corr_list) {
  footnote_text <- c("* p < 0.05", "** p < 0.01", "*** p < 0.001")
  
  # Convert the correlation dataframe to include row names as a column
  corr_df <- corr_list$df
  corr_df <- rownames_to_column(corr_df, var = "Variable")
  
  # Add title
  table_title <- paste("#", corr_list$title, "\n\n")
  
  # Create the Pandoc table
  pandoc_table <- paste(capture.output(knitr::kable(corr_df, format = "pandoc")), collapse = "\n")
  
  # Add footnotes
  footnotes <- paste(footnote_text, collapse = "\n")
  
  return(paste(table_title, pandoc_table, "\n\n", footnotes, sep = "\n"))
}

```


##  Results

### Article volume 2019-23

```{r}
#| results: asis

cor_articles <- create_correlation_table(my_df_ind, vars = c("hoad_articles", "scp_first_author_articles", "wos_first_author_articles", 
            "scp_corresponding_author_articles", "wos_corresponding_author_articles"), "Article volume")
cat(create_pandoc_table(cor_articles))
```
